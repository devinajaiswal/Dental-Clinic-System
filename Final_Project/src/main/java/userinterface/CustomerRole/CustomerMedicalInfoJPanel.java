/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.Customer.CustomerMedicalInfo;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Container;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 *
 * @author z9737
 */
public class CustomerMedicalInfoJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerPersonalInfoJPanel
     */
    private UserAccount account;
    private final String ACTION_Add = "ADD";
    private final String ACTION_UPDATE = "UPDATE";
    private String action;

    public CustomerMedicalInfoJPanel(UserAccount account) {
        initComponents();
        this.account = account;

        if (!data.UserDAO.isMedicalInfoComplete(account.getUsername())) {
            action = ACTION_Add;
        } else {
            action = ACTION_UPDATE;
            CustomerMedicalInfo info = data.UserDAO.searchMedicalInfo(account.getUsername());
            if (info.getGender().equals("M")) {
                radioMale.setSelected(true);
            } else {
                radioFemale.setSelected(true);
            }
//            dateDOB.setEnabled(false);
            DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
            String dateString = info.getDob().format(formatter);
            try {
                Date date;
                date = df.parse(dateString);
                dateDOB.setDate(date);
            } catch (ParseException ex) {
                Logger.getLogger(CustomerMedicalInfoJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (info.isSmoking()) {
                checkboxSmoking.setSelected(true);
            } else {
                checkboxSmoking.setSelected(false);
            }

            if (info.isSweet()) {
                checkboxSweet.setSelected(true);
            } else {
                checkboxSweet.setSelected(false);
            }

            if (info.isDiabetes()) {
                checkboxDiabetes.setSelected(true);
            } else {
                checkboxDiabetes.setSelected(false);
            }

            if (info.isCardio()) {
                checkboxCardio.setSelected(true);
            } else {
                checkboxCardio.setSelected(false);
            }

            if (info.isImmune()) {
                checkboxImmune.setSelected(true);
            } else {
                checkboxImmune.setSelected(false);
            }
        }

        BasicInternalFrameUI ui = (BasicInternalFrameUI) jInternalFrame1.getUI();
        Container north = (Container) ui.getNorthPane();
        north.remove(0);
        north.validate();
        north.repaint();
    }

    /**
     * This method is called state within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupGender = new javax.swing.ButtonGroup();
        labelHead = new javax.swing.JLabel();
        lblRoutingNo = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        lblRoutingNo1 = new javax.swing.JLabel();
        labelFirstName = new javax.swing.JLabel();
        labelLastName = new javax.swing.JLabel();
        labelDriversLiscence = new javax.swing.JLabel();
        radioMale = new javax.swing.JRadioButton();
        radioFemale = new javax.swing.JRadioButton();
        checkboxSmoking = new javax.swing.JCheckBox();
        checkboxSweet = new javax.swing.JCheckBox();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        labAvailable = new javax.swing.JLabel();
        labUnavailable = new javax.swing.JLabel();
        checkboxDiabetes = new javax.swing.JCheckBox();
        checkboxCardio = new javax.swing.JCheckBox();
        checkboxImmune = new javax.swing.JCheckBox();
        dateDOB = new com.toedter.calendar.JDateChooser();

        labelHead.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        labelHead.setText("Medical Information");

        lblRoutingNo.setText("Like Eating Sweet");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblRoutingNo1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblRoutingNo1.setText("Systemic Disease");

        labelFirstName.setText("Gender *");

        labelLastName.setText("Date of Birth *");

        labelDriversLiscence.setText("Smoking");

        buttonGroupGender.add(radioMale);
        radioMale.setText("Male");

        buttonGroupGender.add(radioFemale);
        radioFemale.setText("Female");

        jInternalFrame1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jInternalFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jInternalFrame1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jInternalFrame1.setEnabled(false);
        jInternalFrame1.setMinimumSize(new java.awt.Dimension(100, 25));
        jInternalFrame1.setVisible(true);

        checkboxDiabetes.setText("Diabetes");

        checkboxCardio.setText("Cardiovascular Disease");

        checkboxImmune.setText("Other Autoimmune Disorders");
        checkboxImmune.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxImmuneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkboxImmune)
                    .addComponent(checkboxCardio)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(checkboxDiabetes)
                        .addGap(70, 70, 70)
                        .addComponent(labAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(labUnavailable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(checkboxDiabetes))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(labUnavailable, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkboxCardio)
                .addGap(18, 18, 18)
                .addComponent(checkboxImmune)
                .addGap(0, 23, Short.MAX_VALUE))
        );

        dateDOB.setDateFormatString("MM/dd/yyyy");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(149, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(5, 5, 5)
                                    .addComponent(lblRoutingNo)
                                    .addGap(18, 18, 18))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(labelFirstName)
                                    .addGap(18, 18, 18)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labelDriversLiscence)
                                    .addComponent(labelLastName))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(radioMale)
                                .addGap(18, 18, 18)
                                .addComponent(radioFemale))
                            .addComponent(checkboxSmoking)
                            .addComponent(checkboxSweet)
                            .addComponent(dateDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRoutingNo1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelHead)
                        .addGap(60, 60, 60))
                    .addComponent(jInternalFrame1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(150, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(labelHead)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFirstName)
                    .addComponent(radioMale)
                    .addComponent(radioFemale))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelLastName))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(dateDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDriversLiscence)
                    .addComponent(checkboxSmoking))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRoutingNo)
                    .addComponent(checkboxSweet))
                .addGap(34, 34, 34)
                .addComponent(lblRoutingNo1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        dateDOB.setBorder(new LineBorder(new Color(128, 128, 128)));
        DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
        String dateString = df.format(dateDOB.getDate());
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm");
        LocalDateTime dob = LocalDateTime.parse(dateString + " 00:00", formatter);
        if (dob == null || dob.isBefore(LocalDateTime.parse("01/01/1900 00:00", formatter))) {
            dateDOB.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "Please check the date of birth field!");
            return;
        }
        CustomerMedicalInfo info = new CustomerMedicalInfo();
        info.setDob(dob);
        if (radioMale.isSelected()) {
            info.setGender("M");
        } else {
            info.setGender("F");
        }

        if (checkboxSmoking.isSelected()) {
            info.setSmoking(true);
        } else {
            info.setSmoking(false);
        }

        if (checkboxSweet.isSelected()) {
            info.setSweet(true);
        } else {
            info.setSweet(false);
        }

        if (checkboxDiabetes.isSelected()) {
            info.setDiabetes(true);
        } else {
            info.setDiabetes(false);
        }

        if (checkboxCardio.isSelected()) {
            info.setCardio(true);
        } else {
            info.setCardio(false);
        }

        if (checkboxImmune.isSelected()) {
            info.setImmune(true);
        } else {
            info.setImmune(false);
        }

        if (action.equals(ACTION_Add)) {
            data.UserDAO.createMedicalInfo(account.getUsername(), info);
            JOptionPane.showMessageDialog(this, "Personal infomation updated successfully.");
            Container container = this.getParent();
            container.removeAll();
            container.add(new JPanel());
            CardLayout layout = (CardLayout) container.getLayout();
            layout.next(container);
        } else if (action.equals(ACTION_UPDATE)) {
            data.UserDAO.updateMedicalInfo(account.getUsername(), info);
            JOptionPane.showMessageDialog(this, "Personal infomation updated successfully.");
            Container container = this.getParent();
            container.removeAll();
            container.add(new JPanel());
            CardLayout layout = (CardLayout) container.getLayout();
            layout.next(container);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void checkboxImmuneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxImmuneActionPerformed
    }//GEN-LAST:event_checkboxImmuneActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroupGender;
    private javax.swing.JCheckBox checkboxCardio;
    private javax.swing.JCheckBox checkboxDiabetes;
    private javax.swing.JCheckBox checkboxImmune;
    private javax.swing.JCheckBox checkboxSmoking;
    private javax.swing.JCheckBox checkboxSweet;
    private com.toedter.calendar.JDateChooser dateDOB;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel labAvailable;
    private javax.swing.JLabel labUnavailable;
    private javax.swing.JLabel labelDriversLiscence;
    private javax.swing.JLabel labelFirstName;
    private javax.swing.JLabel labelHead;
    private javax.swing.JLabel labelLastName;
    private javax.swing.JLabel lblRoutingNo;
    private javax.swing.JLabel lblRoutingNo1;
    private javax.swing.JRadioButton radioFemale;
    private javax.swing.JRadioButton radioMale;
    // End of variables declaration//GEN-END:variables
}
