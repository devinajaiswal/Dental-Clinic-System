/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.Enterprise.Enterprise;
import Business.Enterprise.InsurancePlan;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AppointmentWorkRequest;
import Business.WorkQueue.InquiryWorkRequest;
import Business.WorkQueue.Message;
import Business.WorkQueue.PolicyWorkRequest;
import java.awt.Color;
import java.awt.Container;
import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class CustomerSearchPolicyJPanel extends javax.swing.JPanel {

    private UserAccount account;

    /**
     * Creates new form ManageEnterpriseJPanel
     */
    public CustomerSearchPolicyJPanel(UserAccount account) {
        initComponents();
        this.account = account;

        populateTable();
        BasicInternalFrameUI ui = (BasicInternalFrameUI) frameInquiry.getUI();
        Container north = (Container) ui.getNorthPane();
        north.remove(0);
        north.validate();
        north.repaint();
        frameInquiry.setVisible(false);

        ui = (BasicInternalFrameUI) frameApply.getUI();
        north = (Container) ui.getNorthPane();
        north.remove(0);
        north.validate();
        north.repaint();
        frameApply.setVisible(false);
    }

    private void populateTable(ArrayList<InsurancePlan> plans) {
        DefaultTableModel model = (DefaultTableModel) tableClinic.getModel();

        model.setRowCount(0);
        for (InsurancePlan plan : plans) {
            Object[] row = new Object[6];
            row[0] = data.EnterpriseDAO.searchById(plan.getEnterpriseId());
            row[1] = plan;
            row[2] = plan.getPrice();
            row[3] = plan.getFillingCoverage();
            row[4] = plan.getRootCoverage();
            row[5] = plan.getSrpCoverage();
            model.addRow(row);
        }
    }

    private void populateTable() {
        populateTable(data.PricesDAO.getAllInsurancePlans());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableClinic = new javax.swing.JTable();
        buttonApply = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        frameInquiry = new javax.swing.JInternalFrame();
        labAvailable = new javax.swing.JLabel();
        labUnavailable = new javax.swing.JLabel();
        buttonConfirmInquiry = new javax.swing.JButton();
        buttonCancelInquiry = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtInquiry = new javax.swing.JTextArea();
        buttonInquiry = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        buttonSearch = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        frameApply = new javax.swing.JInternalFrame();
        labAvailable1 = new javax.swing.JLabel();
        labUnavailable1 = new javax.swing.JLabel();
        buttonConfirmApply = new javax.swing.JButton();
        buttonCancelApply = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        dateStart = new com.toedter.calendar.JDateChooser();

        tableClinic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Insurance Company Name", "Plan Name", "Yearly Premium", "Filling Coverage(%)", "Root Canal Coverage(%)", "SRP Coverage(%)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableClinic);

        buttonApply.setText("Apply");
        buttonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonApplyActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Search Policy Plan");

        frameInquiry.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        frameInquiry.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        frameInquiry.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        frameInquiry.setEnabled(false);
        frameInquiry.setVisible(true);

        buttonConfirmInquiry.setText("Confirm");
        buttonConfirmInquiry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConfirmInquiryActionPerformed(evt);
            }
        });

        buttonCancelInquiry.setText("Cancel");
        buttonCancelInquiry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelInquiryActionPerformed(evt);
            }
        });

        txtInquiry.setColumns(20);
        txtInquiry.setRows(5);
        jScrollPane2.setViewportView(txtInquiry);

        javax.swing.GroupLayout frameInquiryLayout = new javax.swing.GroupLayout(frameInquiry.getContentPane());
        frameInquiry.getContentPane().setLayout(frameInquiryLayout);
        frameInquiryLayout.setHorizontalGroup(
            frameInquiryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameInquiryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameInquiryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frameInquiryLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(labUnavailable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(frameInquiryLayout.createSequentialGroup()
                        .addComponent(buttonConfirmInquiry)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancelInquiry)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        frameInquiryLayout.setVerticalGroup(
            frameInquiryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameInquiryLayout.createSequentialGroup()
                .addGroup(frameInquiryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labUnavailable, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frameInquiryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonConfirmInquiry, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCancelInquiry, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        buttonInquiry.setText("Make An Inquiry");
        buttonInquiry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInquiryActionPerformed(evt);
            }
        });

        buttonSearch.setText("Search");

        jLabel6.setText("Keyword");

        frameApply.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        frameApply.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        frameApply.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        frameApply.setEnabled(false);
        frameApply.setVisible(true);

        buttonConfirmApply.setText("Confirm");
        buttonConfirmApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConfirmApplyActionPerformed(evt);
            }
        });

        buttonCancelApply.setText("Cancel");
        buttonCancelApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelApplyActionPerformed(evt);
            }
        });

        jLabel2.setText("Start Date");

        dateStart.setDateFormatString("MM/dd/yyyy");

        javax.swing.GroupLayout frameApplyLayout = new javax.swing.GroupLayout(frameApply.getContentPane());
        frameApply.getContentPane().setLayout(frameApplyLayout);
        frameApplyLayout.setHorizontalGroup(
            frameApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameApplyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateStart, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162)
                .addComponent(labAvailable1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(labUnavailable1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(frameApplyLayout.createSequentialGroup()
                .addComponent(buttonConfirmApply)
                .addGap(18, 18, 18)
                .addComponent(buttonCancelApply)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        frameApplyLayout.setVerticalGroup(
            frameApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameApplyLayout.createSequentialGroup()
                .addGroup(frameApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frameApplyLayout.createSequentialGroup()
                        .addGroup(frameApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labAvailable1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labUnavailable1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addComponent(jLabel2))
                    .addGroup(frameApplyLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(dateStart, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22)
                .addGroup(frameApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonConfirmApply, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCancelApply, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(frameInquiry, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(frameApply)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonInquiry)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonApply, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonApply, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonInquiry, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(frameInquiry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frameApply, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resetFrameInquiry() {
        frameInquiry.setVisible(false);
        tableClinic.setEnabled(true);
        txtInquiry.setText("");
    }

    private void resetFrameAppointment() {
        frameApply.setVisible(false);
        tableClinic.setEnabled(true);
        dateStart.setDate(null);
    }

    private void setButtonsEnabled(boolean enable) {
        buttonApply.setEnabled(enable);
        buttonInquiry.setEnabled(enable);
    }

    private void buttonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApplyActionPerformed
        if (tableClinic.getSelectedRow() >= 0) {
            frameApply.setVisible(true);
            setButtonsEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a record first");
            return;
        }
    }//GEN-LAST:event_buttonApplyActionPerformed

    private void buttonConfirmInquiryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConfirmInquiryActionPerformed
        if (!userinterface.Util.requireNotEmpty(this, txtInquiry)) {
            return;
        }
        String messageText = txtInquiry.getText();
        InquiryWorkRequest request = new InquiryWorkRequest();
        request.setSenderUsername(account.getUsername());
        request.setMessage(messageText);
        request.setRequestTime(LocalDateTime.now());
        Enterprise enterprise = (Enterprise) tableClinic.getValueAt(tableClinic.getSelectedRow(), 0);
        Organization org = data.OrganizationDAO.searchByTypeAndEnterprise(
            Organization.Type.InsuranceRepresentative.getValue(), enterprise.getEnterpriseId());
        if (org == null) {
            JOptionPane.showMessageDialog(this, "The company is not setting up properly right now, please try later!");
            return;
        }

        request.setReceiverOrganizationId(org.getOrganizationID());
        int requestId = data.WorkRequestDAO.create(request);

        Message message;
        message = new Message();
        message.setFromUsername(account.getUsername());
        message.setMessage(messageText);
        message.setSentTime(LocalDateTime.now());
        data.InquiryWorkRequestDAO.createMessage(requestId, message);

        JOptionPane.showMessageDialog(this, "Messasge Sent!");

        resetFrameInquiry();
        setButtonsEnabled(true);
    }//GEN-LAST:event_buttonConfirmInquiryActionPerformed

    private void buttonCancelInquiryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelInquiryActionPerformed
        frameInquiry.setVisible(false);
        resetFrameInquiry();
        setButtonsEnabled(true);
    }//GEN-LAST:event_buttonCancelInquiryActionPerformed

    private void buttonInquiryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInquiryActionPerformed
        if (tableClinic.getSelectedRow() >= 0) {
            frameInquiry.setVisible(true);
            setButtonsEnabled(false);
            tableClinic.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a record first");
            return;
        }
    }//GEN-LAST:event_buttonInquiryActionPerformed

    private void buttonConfirmApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConfirmApplyActionPerformed
        userinterface.Util.setBorderBlack(dateStart);
        if (dateStart.getDate() == null || dateStart.getDate().compareTo(Date.valueOf(LocalDate.now())) <= 0) {
            dateStart.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "We can only sell policy as early as tomorrow!");
            return;
        }

        InsurancePlan plan = (InsurancePlan) tableClinic.getValueAt(tableClinic.getSelectedRow(), 1);
        PolicyWorkRequest request = new PolicyWorkRequest();
        DateFormat df = new SimpleDateFormat("MM/dd/yyyy ");
        String dateString = df.format(dateStart.getDate());
        String timeString = "00:00";
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm");
        LocalDateTime startDate = LocalDateTime.parse(dateString + timeString, formatter);

        if (data.PolicyDAO.isUserCoveredAtDate(startDate)) {
            JOptionPane.showMessageDialog(this, "You will still be covered by another policy at that time!");
            return;
        }
        
        request.setStartDate(startDate);
        request.setPlanId(plan.getPlanId());
        request.setSenderUsername(account.getUsername());
        request.setUsername(account.getUsername());
        request.setMessage("Policy applied");
        request.setRequestTime(LocalDateTime.now());
        Enterprise enterprise = (Enterprise) tableClinic.getValueAt(tableClinic.getSelectedRow(), 0);
        Organization org = data.OrganizationDAO.searchByTypeAndEnterprise(
            Organization.Type.InsurancePolicyManager.getValue(), enterprise.getEnterpriseId());
        if (org == null) {
            JOptionPane.showMessageDialog(this, "The clinic is not setting up properly right now, please try later!");
            return;
        }
        request.setReceiverOrganizationId(org.getOrganizationID());
        int requestId = data.WorkRequestDAO.create(request);
        data.PolicyDAO.create(requestId, request);

        JOptionPane.showMessageDialog(this, "Application request sent!");

        resetFrameAppointment();
        setButtonsEnabled(true);
    }//GEN-LAST:event_buttonConfirmApplyActionPerformed

    private void buttonCancelApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelApplyActionPerformed
        frameApply.setVisible(false);
        resetFrameAppointment();
        setButtonsEnabled(true);
    }//GEN-LAST:event_buttonCancelApplyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonApply;
    private javax.swing.JButton buttonCancelApply;
    private javax.swing.JButton buttonCancelInquiry;
    private javax.swing.JButton buttonConfirmApply;
    private javax.swing.JButton buttonConfirmInquiry;
    private javax.swing.JButton buttonInquiry;
    private javax.swing.JButton buttonSearch;
    private com.toedter.calendar.JDateChooser dateStart;
    private javax.swing.JInternalFrame frameApply;
    private javax.swing.JInternalFrame frameInquiry;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labAvailable;
    private javax.swing.JLabel labAvailable1;
    private javax.swing.JLabel labUnavailable;
    private javax.swing.JLabel labUnavailable1;
    private javax.swing.JTable tableClinic;
    private javax.swing.JTextArea txtInquiry;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
