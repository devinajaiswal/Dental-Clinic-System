/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.Customer.CustomerPersonalInfo;
import Business.Enterprise.Enterprise;
import Business.Organization.DentalCliniclInfo;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AppointmentWorkRequest;
import Business.WorkQueue.InquiryWorkRequest;
import Business.WorkQueue.Message;
import com.google.maps.DistanceMatrixApi;
import com.google.maps.GeoApiContext;
import com.google.maps.errors.ApiException;
import com.google.maps.model.DistanceMatrix;
import java.awt.Color;
import java.awt.Container;
import java.io.IOException;
import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import userinterface.DetailJFrame;
import userinterface.MedicalInfoJPanel;
import userinterface.TreatmentPriceJPanel;

/**
 *
 * @author raunak
 */
public class CustomerSearchClinicJPanel extends javax.swing.JPanel {

    private UserAccount account;

    /**
     * Creates new form ManageEnterpriseJPanel
     */
    public CustomerSearchClinicJPanel(UserAccount account) {
        initComponents();
        this.account = account;

        populateTable();
        BasicInternalFrameUI ui = (BasicInternalFrameUI) frameInquiry.getUI();
        Container north = (Container) ui.getNorthPane();
        north.remove(0);
        north.validate();
        north.repaint();
        frameInquiry.setVisible(false);

        ui = (BasicInternalFrameUI) frameAppointment.getUI();
        north = (Container) ui.getNorthPane();
        north.remove(0);
        north.validate();
        north.repaint();
        frameAppointment.setVisible(false);
    }

    private void populateTable() {
        populateTable(data.EnterpriseDAO.getAllbyType(Enterprise.EnterpriseType.DENTAL_CLINIC.getValue()), null);
    }

    private void populateTable(ArrayList<Enterprise> list, String address) {
        DefaultTableModel model = (DefaultTableModel) tableClinic.getModel();

        model.setRowCount(0);
        for (Enterprise enterprise : list) {
            Object[] row = new Object[3];
            row[0] = enterprise;
            DentalCliniclInfo clinicInfo = data.EnterpriseDAO.searchClinicInfo(enterprise.getEnterpriseId());
            if (address == null) {
                CustomerPersonalInfo personInfo = data.UserDAO.searchPersonalInfo(account.getUsername());
                String personalAddress = personInfo.getStreet() + ", " + personInfo.getCity() + ", " + personInfo.getState() + ", " + personInfo.getPostcode();
                address = personalAddress;
            }

            if (clinicInfo != null) {
                String clinicAddress = clinicInfo.getStreet() + ", " + clinicInfo.getCity() + ", " + clinicInfo.getState() + ", " + clinicInfo.getPostcode();

                row[1] = clinicAddress;

                GeoApiContext context = new GeoApiContext.Builder()
                    .apiKey("AIzaSyDG85iDSWZ2OgPVpOC1l2QFhSSNc3PCMVg")
                    .build();
                DistanceMatrix results;
                String[] orgris = {address};
                String[] dest = {clinicAddress};
                try {
                    results = DistanceMatrixApi.getDistanceMatrix(context, orgris, dest).await();
                    row[2] = results.rows[0].elements[0].distance;
                } catch (ApiException ex) {
                    Logger.getLogger(CustomerSearchClinicJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CustomerSearchClinicJPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(CustomerSearchClinicJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {

            }
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableClinic = new javax.swing.JTable();
        buttonAppointment = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        frameInquiry = new javax.swing.JInternalFrame();
        labAvailable = new javax.swing.JLabel();
        labUnavailable = new javax.swing.JLabel();
        buttonConfirmInquiry = new javax.swing.JButton();
        buttonCancelInquiry = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtInquiry = new javax.swing.JTextArea();
        buttonInquiry = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        buttonSearch = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        comboDistance = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        frameAppointment = new javax.swing.JInternalFrame();
        labAvailable1 = new javax.swing.JLabel();
        labUnavailable1 = new javax.swing.JLabel();
        buttonConfirmAppointment = new javax.swing.JButton();
        buttonCancelAppointment = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        comboTime = new javax.swing.JComboBox();
        dateAppointment = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        buttonFees = new javax.swing.JButton();

        tableClinic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clinic Name", "Address", "Distance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableClinic);

        buttonAppointment.setText("Make An Appointment");
        buttonAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAppointmentActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel4.setText("Search Dental Clinic");

        frameInquiry.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        frameInquiry.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        frameInquiry.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        frameInquiry.setEnabled(false);
        frameInquiry.setVisible(true);

        buttonConfirmInquiry.setText("Confirm");
        buttonConfirmInquiry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConfirmInquiryActionPerformed(evt);
            }
        });

        buttonCancelInquiry.setText("Cancel");
        buttonCancelInquiry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelInquiryActionPerformed(evt);
            }
        });

        txtInquiry.setColumns(20);
        txtInquiry.setRows(5);
        jScrollPane2.setViewportView(txtInquiry);

        javax.swing.GroupLayout frameInquiryLayout = new javax.swing.GroupLayout(frameInquiry.getContentPane());
        frameInquiry.getContentPane().setLayout(frameInquiryLayout);
        frameInquiryLayout.setHorizontalGroup(
            frameInquiryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameInquiryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameInquiryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frameInquiryLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 847, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(labUnavailable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(frameInquiryLayout.createSequentialGroup()
                        .addComponent(buttonConfirmInquiry)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancelInquiry)))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        frameInquiryLayout.setVerticalGroup(
            frameInquiryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameInquiryLayout.createSequentialGroup()
                .addGroup(frameInquiryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labUnavailable, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frameInquiryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonConfirmInquiry, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCancelInquiry, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        buttonInquiry.setText("Make An Inquiry");
        buttonInquiry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInquiryActionPerformed(evt);
            }
        });

        buttonSearch.setText("Search");
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        jLabel6.setText("Name");

        comboDistance.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "5", "10", "20", "50" }));

        jLabel8.setText("Distance");

        frameAppointment.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        frameAppointment.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        frameAppointment.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        frameAppointment.setEnabled(false);
        frameAppointment.setVisible(true);

        buttonConfirmAppointment.setText("Confirm");
        buttonConfirmAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConfirmAppointmentActionPerformed(evt);
            }
        });

        buttonCancelAppointment.setText("Cancel");
        buttonCancelAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelAppointmentActionPerformed(evt);
            }
        });

        jLabel2.setText("Date");

        jLabel10.setText("Time");

        comboTime.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00" }));

        dateAppointment.setDateFormatString("MM/dd/yyyy");

        javax.swing.GroupLayout frameAppointmentLayout = new javax.swing.GroupLayout(frameAppointment.getContentPane());
        frameAppointment.getContentPane().setLayout(frameAppointmentLayout);
        frameAppointmentLayout.setHorizontalGroup(
            frameAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameAppointmentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frameAppointmentLayout.createSequentialGroup()
                        .addGap(496, 496, 496)
                        .addComponent(labAvailable1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(labUnavailable1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(frameAppointmentLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboTime, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(frameAppointmentLayout.createSequentialGroup()
                .addComponent(buttonConfirmAppointment)
                .addGap(18, 18, 18)
                .addComponent(buttonCancelAppointment)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        frameAppointmentLayout.setVerticalGroup(
            frameAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameAppointmentLayout.createSequentialGroup()
                .addGroup(frameAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labAvailable1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labUnavailable1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(frameAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateAppointment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frameAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel10)
                        .addComponent(comboTime, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(frameAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonConfirmAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCancelAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jLabel1.setText("KM");

        jLabel7.setText("Address");

        buttonFees.setText("View Fees");
        buttonFees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFeesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(frameInquiry, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(frameAppointment)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonInquiry)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonAppointment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonFees)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(comboDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel1)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonInquiry, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonFees, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(frameInquiry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frameAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resetFrameInquiry() {
        frameInquiry.setVisible(false);
        tableClinic.setEnabled(true);
        txtInquiry.setText("");
    }

    private void resetFrameAppointment() {
        frameAppointment.setVisible(false);
        tableClinic.setEnabled(true);
        dateAppointment.setDate(null);
        comboTime.setSelectedIndex(0);
    }

    private void setButtonsEnabled(boolean enable) {
        buttonAppointment.setEnabled(enable);
        buttonInquiry.setEnabled(enable);
    }

    private void buttonAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAppointmentActionPerformed
        if (tableClinic.getSelectedRow() >= 0) {
            Enterprise enterprise = (Enterprise) tableClinic.getValueAt(tableClinic.getSelectedRow(), 0);
            frameAppointment.setVisible(true);
            setButtonsEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a record first");
            return;
        }
    }//GEN-LAST:event_buttonAppointmentActionPerformed

    private void buttonConfirmInquiryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConfirmInquiryActionPerformed
        if (!userinterface.Util.requireNotEmpty(this, txtInquiry)) {
            return;
        }
        String messageText = txtInquiry.getText();
        InquiryWorkRequest request = new InquiryWorkRequest();
        request.setSenderUsername(account.getUsername());
        request.setMessage(messageText);
        request.setRequestTime(LocalDateTime.now());
        Enterprise enterprise = (Enterprise) tableClinic.getValueAt(tableClinic.getSelectedRow(), 0);
        Organization org = data.OrganizationDAO.searchByTypeAndEnterprise(
            Organization.Type.DentalFrontDesk.getValue(), enterprise.getEnterpriseId());
        if (org == null) {
            JOptionPane.showMessageDialog(this, "The clinic is not setting up properly right now, please try later!");
            return;
        }

        request.setReceiverOrganizationId(org.getOrganizationID());
        int requestId = data.WorkRequestDAO.create(request);

        Message message;
        message = new Message();
        message.setFromUsername(account.getUsername());
        message.setMessage(messageText);
        message.setSentTime(LocalDateTime.now());
        data.InquiryWorkRequestDAO.createMessage(requestId, message);

        JOptionPane.showMessageDialog(this, "Messasge Sent!");

        resetFrameInquiry();
        setButtonsEnabled(true);
    }//GEN-LAST:event_buttonConfirmInquiryActionPerformed

    private void buttonCancelInquiryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelInquiryActionPerformed
        frameInquiry.setVisible(false);
        resetFrameInquiry();
        setButtonsEnabled(true);
    }//GEN-LAST:event_buttonCancelInquiryActionPerformed

    private void buttonInquiryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInquiryActionPerformed
        if (tableClinic.getSelectedRow() >= 0) {
            Enterprise enterprise = (Enterprise) tableClinic.getValueAt(tableClinic.getSelectedRow(), 0);
            frameInquiry.setVisible(true);
            setButtonsEnabled(false);
            tableClinic.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a record first");
            return;
        }
    }//GEN-LAST:event_buttonInquiryActionPerformed

    private void buttonConfirmAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConfirmAppointmentActionPerformed
        userinterface.Util.setBorderBlack(comboTime, dateAppointment);
        if (dateAppointment.getDate() == null || dateAppointment.getDate().compareTo(Date.valueOf(LocalDate.now())) <= 0) {
            dateAppointment.setBorder(new LineBorder(Color.RED));
            JOptionPane.showMessageDialog(this, "We can only make appointment as early as tomorrow!");
            return;
        }
        if (!userinterface.Util.requireSeletedItemNotNull(this, comboTime)) {
            return;
        }

        AppointmentWorkRequest request = new AppointmentWorkRequest();
        DateFormat df = new SimpleDateFormat("MM/dd/yyyy ");
        String dateString = df.format(dateAppointment.getDate());
        String timeString = (String) comboTime.getSelectedItem();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm");
        LocalDateTime appointmentTime = LocalDateTime.parse(dateString + timeString, formatter);
        request.setAppointmentTime(appointmentTime);

        request.setSenderUsername(account.getUsername());
        request.setMessage("Appointment Request");
        request.setRequestTime(LocalDateTime.now());
        Enterprise enterprise = (Enterprise) tableClinic.getValueAt(tableClinic.getSelectedRow(), 0);
        Organization org = data.OrganizationDAO.searchByTypeAndEnterprise(
            Organization.Type.DentalFrontDesk.getValue(), enterprise.getEnterpriseId());
        if (org == null) {
            JOptionPane.showMessageDialog(this, "The clinic is not setting up properly right now, please try later!");
            return;
        }
        request.setReceiverOrganizationId(org.getOrganizationID());
        int requestId = data.WorkRequestDAO.create(request);
        data.AppointmentWorkRequestDAO.createAppointment(requestId, appointmentTime);

        JOptionPane.showMessageDialog(this, "Appointment request sent!");

        resetFrameAppointment();
        setButtonsEnabled(true);
    }//GEN-LAST:event_buttonConfirmAppointmentActionPerformed

    private void buttonCancelAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelAppointmentActionPerformed
        frameAppointment.setVisible(false);
        resetFrameAppointment();
        setButtonsEnabled(true);
    }//GEN-LAST:event_buttonCancelAppointmentActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        userinterface.Util.setBorderBlack(txtAddress, txtName, comboDistance);

        ArrayList<Enterprise> list = data.EnterpriseDAO.getAllbyType(Enterprise.EnterpriseType.DENTAL_CLINIC.getValue());
        ArrayList<Enterprise> temp = new ArrayList<>();
        ArrayList<Enterprise> result = new ArrayList<>();
        if (txtName.getText() != null && !txtName.equals("")) {
            for (Enterprise enterprise : list) {
                if (enterprise.getEnterpriseName().contains(txtName.getText())) {
                    temp.add(enterprise);
                    result.add(enterprise);
                }
            }
        }

        if (txtAddress.getText() != null && !txtAddress.getText().equals("")) {
            String distance = (String) comboDistance.getSelectedItem();
            if (distance == null || distance.equals("")) {
                comboDistance.setBorder(new LineBorder(Color.RED));
                JOptionPane.showMessageDialog(this, "You must select a distance!");
                return;
            }
            int dis = Integer.parseInt(distance);

            for (Enterprise enterprise : temp) {
                DentalCliniclInfo clinicInfo = data.EnterpriseDAO.searchClinicInfo(enterprise.getEnterpriseId());
                if (clinicInfo != null) {
                    String clinicAddress = clinicInfo.getStreet() + ", " + clinicInfo.getCity() + ", " + clinicInfo.getState() + ", " + clinicInfo.getPostcode();
                    GeoApiContext context = new GeoApiContext.Builder()
                        .apiKey("AIzaSyDG85iDSWZ2OgPVpOC1l2QFhSSNc3PCMVg")
                        .build();
                    DistanceMatrix results;
                    String[] orgris = {txtAddress.getText()};
                    String[] dest = {clinicAddress};
                    try {
                        results = DistanceMatrixApi.getDistanceMatrix(context, orgris, dest).await();
                        long disResult = results.rows[0].elements[0].distance.inMeters;
                        if (disResult > dis * 1000) {
                            result.remove(enterprise);
                        }
                    } catch (ApiException ex) {
                        Logger.getLogger(CustomerSearchClinicJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(CustomerSearchClinicJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(CustomerSearchClinicJPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                populateTable(result, txtAddress.getText());
            }

        } else {
            String distance = (String) comboDistance.getSelectedItem();
            if (distance != null && !distance.equals("")) {
                int dis = Integer.parseInt(distance);
                CustomerPersonalInfo personInfo = data.UserDAO.searchPersonalInfo(account.getUsername());
                String personalAddress = personInfo.getStreet() + ", " + personInfo.getCity() + ", " + personInfo.getState() + ", " + personInfo.getPostcode();
                for (Enterprise enterprise : temp) {
                    DentalCliniclInfo clinicInfo = data.EnterpriseDAO.searchClinicInfo(enterprise.getEnterpriseId());
                    if (clinicInfo != null) {
                        String clinicAddress = clinicInfo.getStreet() + ", " + clinicInfo.getCity() + ", " + clinicInfo.getState() + ", " + clinicInfo.getPostcode();
                        GeoApiContext context = new GeoApiContext.Builder()
                            .apiKey("AIzaSyDG85iDSWZ2OgPVpOC1l2QFhSSNc3PCMVg")
                            .build();
                        DistanceMatrix results;
                        String[] orgris = {personalAddress};
                        String[] dest = {clinicAddress};
                        try {
                            results = DistanceMatrixApi.getDistanceMatrix(context, orgris, dest).await();
                            long disResult = results.rows[0].elements[0].distance.inMeters;
                            if (disResult > dis * 1000) {
                                result.remove(enterprise);
                            }
                        } catch (ApiException ex) {
                            Logger.getLogger(CustomerSearchClinicJPanel.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(CustomerSearchClinicJPanel.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            Logger.getLogger(CustomerSearchClinicJPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
            populateTable(result, null);
        }

    }//GEN-LAST:event_buttonSearchActionPerformed

    private void buttonFeesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFeesActionPerformed
        if (tableClinic.getSelectedRow() >= 0) {
            Enterprise enterprise = (Enterprise) tableClinic.getValueAt(tableClinic.getSelectedRow(), 0);
            if (!data.PricesDAO.isTeatmentPricesExist(enterprise.getEnterpriseId())) {
                JOptionPane.showMessageDialog(this, "The clinic is not setting up properly, please try later");
                return;
            }
            DetailJFrame customerJFrame = new DetailJFrame();
            customerJFrame.setSize(500, 500);
            customerJFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            customerJFrame.setLocationRelativeTo(this);
            customerJFrame.setContentPane(new TreatmentPriceJPanel(enterprise));
            customerJFrame.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a record first");
            return;
        }
    }//GEN-LAST:event_buttonFeesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAppointment;
    private javax.swing.JButton buttonCancelAppointment;
    private javax.swing.JButton buttonCancelInquiry;
    private javax.swing.JButton buttonConfirmAppointment;
    private javax.swing.JButton buttonConfirmInquiry;
    private javax.swing.JButton buttonFees;
    private javax.swing.JButton buttonInquiry;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JComboBox<String> comboDistance;
    private javax.swing.JComboBox comboTime;
    private com.toedter.calendar.JDateChooser dateAppointment;
    private javax.swing.JInternalFrame frameAppointment;
    private javax.swing.JInternalFrame frameInquiry;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labAvailable;
    private javax.swing.JLabel labAvailable1;
    private javax.swing.JLabel labUnavailable;
    private javax.swing.JLabel labUnavailable1;
    private javax.swing.JTable tableClinic;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextArea txtInquiry;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
